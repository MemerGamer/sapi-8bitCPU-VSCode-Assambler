{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://sapicpu-assembler/./src/assembler.js","webpack://sapicpu-assembler/external commonjs \"vscode\"","webpack://sapicpu-assembler/webpack/bootstrap","webpack://sapicpu-assembler/webpack/runtime/define property getters","webpack://sapicpu-assembler/webpack/runtime/hasOwnProperty shorthand","webpack://sapicpu-assembler/webpack/runtime/make namespace object","webpack://sapicpu-assembler/./src/extension.ts"],"sourcesContent":["/* eslint-disable no-dupe-keys */\n\"use strict\";\n\nexport class Assembler {\n  constructor() {\n    this.memAddress = 0;\n    this.labels = {};\n  }\n\n  getMemAddress() {\n    return this.memAddress;\n  }\n  setMemAddress(value) {\n    this.memAddress = value;\n  }\n  incrementMemAddress(byValue = 1) {\n    this.memAddress += byValue;\n  }\n\n  getLabel(key) {\n    return this.labels[key];\n  }\n\n  setLabel(key, value) {\n    this.labels[key] = value;\n  }\n\n  assemble(code) {\n    this.setMemAddress(0);\n    code = code.replace(/:/g, \"\\n\");\n    let lines = code.split('\\n').filter(line => line.trim()); //filter out empty lines\n    let finalCode = \"v2.0 raw\\n\";\n\n    lines.forEach(line => {\n      line = line.split(/;|#/)[0];\n      line = line.trim();\n      if (line.length === 0) return;  // skip lines with only comments\n\n      let [opCode, operand, data] = line.split(/, |,| |:/).map(line => {\n        line = line.replace(\"(\", \"\");\n        line = line.replace(\")\", \"\");\n        return line;\n      });\n\n      let firstChar = Assembler.hex(InstructionMap[opCode], \"end\");\n      // this.incrementMemAddress();\n      let restOfString = this.makeOperand(opCode, operand, data);\n      //console.log(restOfString,\"\\n\");\n\n      if (operand === undefined && data === undefined) return;\n\n      if (restOfString !== undefined && restOfString.length === 1) {  // one byte\n        finalCode += firstChar[0] + restOfString + \" \";\n        this.incrementMemAddress();\n      }\n      else {\n        if (restOfString !== undefined && firstChar !== undefined) {  // two bytes\n          finalCode += firstChar[0] + restOfString[0] + restOfString.substring(restOfString.indexOf(\" \")) + \" \";\n          this.incrementMemAddress(2);\n        }\n        else if (opCode === \"JMP\") { // two bytes, JMP\n          finalCode += firstChar[0] + \"0 \" + Assembler.hex(this.getLabel(operand)) + \" \";\n          this.incrementMemAddress(2);\n        }\n        else {  // two bytes, JNE, JEQ...\n          finalCode += firstChar[0]+(operand[1]*4).toString(16)+ \" \" + Assembler.hex(this.getLabel(data)) + \" \";\n          // added the second bit to jump opcode for example jne - 9 and R3 - c ==> 9c\n          this.incrementMemAddress(2);\n        }\n      }\n      //console.log(restOfString,\" \",restOfString.substring(restOfString.indexOf(\" \")));\n\n    });\n\n    return finalCode.slice(0,-1);   // remove last appended space\n  }\n\n  makeOperand(opCode, operand, data) {\n    // this.incrementMemAddress();\n    if (data !== undefined && data[0] == 'R') {\n      return (((operand[1]) & 0b11) << 2 | ((((data[1]) & 0b11) << 0) & 0xff)).toString(16);\n    }\n    else {\n      if (!isNaN(parseInt(data))) {\n        return (operand[1] * 4).toString(16) + ' ' + data.slice(-2);\n      }\n      else {\n        // this.incrementMemAddress(-1);\n        if (data === undefined)\n          this.setLabel(opCode, this.getMemAddress());\n        else\n          this.setLabel(opCode, this.getMemAddress());\n          //at this section the label is the opcode not the data\n      }\n\n    }\n\n  }\n\n  /**\n   * Converts DEC to HEX\n   * @param {Number} value Value to convert\n   * @param {String} pad Text padding. Default \"start\"\n   */\n  static hex(value, pad = \"start\") {\n    if (value !== undefined) return pad === \"start\" ? value.toString(16).padStart(2, '0') : value.toString(16).padEnd(2, '0');\n  }\n}\n\nconst InstructionMap = {\n  \"AND\": 0x00,\n  \"OR\": 0x01,\n  \"ADD\": 0x02,\n  \"SUB\": 0x03,\n  \"LW\": 0x04,\n  \"SW\": 0x05,\n  \"MOV\": 0x06,\n  \"INP\": 0x07,\n  \"JEQ\": 0x08,\n  \"JNE\": 0x09,\n  \"JGT\": 0xa,\n  \"JLT\": 0xb,\n  \"LW\": 0xc,\n  \"SW\": 0xd,\n  \"LI\": 0xe,\n  \"JMP\": 0xf,\n}\n\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as vscode from \"vscode\";\nimport { splice } from \"../webpack.config.js\";\n// Assembler import\n\nimport { Assembler } from \"./assembler.js\";\nconst assembler = new Assembler();\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"sapicpu-assembler.assemble\", () => {\n      let editorText = \"\";\n      let output = \"\";\n      let outputConsole =\n        \"Copy your assembled code from here (including 'v2.o raw'): \\n\\n\";\n      if (vscode.window.activeTextEditor?.document.getText()) {\n        editorText = vscode.window.activeTextEditor?.document.getText();\n      }\n      output = assembler.assemble(editorText);\n      outputConsole = output.concat(output);\n\n      const panel = vscode.window.createWebviewPanel(\n        \"sapicpu-assembler\",\n        \"Assembled Code\",\n        vscode.ViewColumn.One,\n        {}\n      );\n\n      panel.webview.html = getContent(output);\n\n      vscode.window.showInformationMessage(\"Your code has been assembled!\");\n\n      vscode.window.createTerminal(\"Assembler\");\n      vscode.window.onDidOpenTerminal(() => {\n        console.log(outputConsole);\n      });\n    })\n  );\n}\n\nfunction split(str: string, index: number) {\n  const result = [str.slice(0, index), str.slice(index)];\n\n  return result;\n}\n\nfunction getContent(output: string) {\n  const [prefix, code] = split(output, 8);\n  return `\n  <!DOCTYPE html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Assembled code</title>\n    <style> \n      :root{\n        --bg-color: #17181A;\n        --accent-color: #0AB377;\n        --text-color: #CDD1CC;\n        --gray-500: #202123;\n        --gray-400: #494A4C;\n\n        --heading-font: 'Space Mono', monospace;\n        --text-font: 'Roboto Mono', monospace;\n      }\n    body {\n      background: var(--bg-color);\n      margin: auto;\n      margin-top:3rem;\n      width: 80%;\n      border: 2px solid #0AB377;\n      padding: 10px;\n      text-align: center;\n      margin-bottom: 50px;\n      }\n      \n    textarea.code {\n      background: #404040;\n      color: white;\n      width: 90%;\n      resize: none;\n      display: block;\n      border-radius: 10px;\n      overflow-y: auto;\n      overflow-x: hidden;\n      font-family: monospace;\n      border: 1px solid #0AB377;\n      padding: 1em;\n      white-space:pre-wrap;\n      }\n\n    .btn{\n      margin-bottom: 15px;\n      background: var(--bg-color);\n      color: var(--text-color);\n      font-family: var(--text-font);\n      padding: 10px 15px 10px 15px;\n      border: solid 1px var(--accent-color);\n      font-size: 13px;\n\n      transition: background .1s ease-out;\n    }\n\n    .btn:hover{\n      background: var(--accent-color);\n      color: var(--bg-color);\n      cursor: pointer;\n    }\n    .active-btn{\n      background: var(--accent-color) !important;\n      color: var(--bg-color) !important;\n    }\n\n    a:link { text-decoration: none; }\n    a:visited { text-decoration: none; }\n    a:hover { text-decoration: none; }\n    a:active { text-decoration: none; }\n\n</style>\n  </head>\n  <body>\n    <h2>Copy your assembled code from here (including 'v2.o raw'):</h2>\n    <textarea id=\"textarea\" class=\"code\" contenteditable=\"true\" spellcheck=\"false\" aria-label='Assembled Code' >${prefix}${code}</textarea>\n    <div>\n      <br>\n      <p>Check out our Assembly Website:</p>\n      <br>\n      <div>\n        <a class=\"btn\" taget=\"_blank\" href=\"https://sapi-cpu.netlify.app/\">SapiCPU</a>\n      </div>\n      <br>\n    </div>\n  </body>\n</html>\n\n  `;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function deactivate() {}\n"],"names":["Assembler","constructor","this","memAddress","labels","getMemAddress","setMemAddress","value","incrementMemAddress","byValue","getLabel","key","setLabel","assemble","code","lines","replace","split","filter","line","trim","finalCode","forEach","length","opCode","operand","data","map","firstChar","hex","InstructionMap","restOfString","makeOperand","undefined","substring","indexOf","toString","slice","isNaN","parseInt","static","pad","padStart","padEnd","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","assembler","context","subscriptions","push","vscode","commands","registerCommand","editorText","output","outputConsole","window","activeTextEditor","document","getText","concat","createWebviewPanel","ViewColumn","One","webview","html","prefix","str","getContent","showInformationMessage","createTerminal","onDidOpenTerminal","console","log"],"sourceRoot":""}