(()=>{"use strict";var e={382:(e,n,t)=>{t.r(n),t.d(n,{Assembler:()=>o});class o{constructor(){this.memAddress=0,this.labels={}}getMemAddress(){return this.memAddress}setMemAddress(e){this.memAddress=e}incrementMemAddress(e=1){this.memAddress+=e}getLabel(e){return this.labels[e]}setLabel(e,n){this.labels[e]=n}assemble(e){this.setMemAddress(0);let n=(e=e.replace(/:/g,"\n")).split("\n").filter((e=>e.trim())),t="v2.0 raw\n";return n.forEach((e=>{if(0===(e=(e=e.split(/;|#/)[0]).trim()).length)return;let[n,a,i]=e.split(/, |,| |:/).map((e=>(e=e.replace("(","")).replace(")",""))),s=o.hex(r[n],"end"),d=this.makeOperand(n,a,i);void 0===a&&void 0===i||(void 0!==d&&1===d.length?(t+=s[0]+d+" ",this.incrementMemAddress()):void 0!==d&&void 0!==s?(t+=s[0]+d[0]+d.substring(d.indexOf(" "))+" ",this.incrementMemAddress(2)):"JMP"===n?(t+=s[0]+"0 "+o.hex(this.getLabel(a))+" ",this.incrementMemAddress(2)):(t+=s[0]+(4*a[1]).toString(16)+" "+o.hex(this.getLabel(i))+" ",this.incrementMemAddress(2)))})),t.slice(0,-1)}makeOperand(e,n,t){return void 0!==t&&"R"==t[0]?((3&n[1])<<2|(3&t[1])<<0&255).toString(16):isNaN(parseInt(t))?void this.setLabel(e,this.getMemAddress()):(4*n[1]).toString(16)+" "+t.slice(-2)}static hex(e,n="start"){if(void 0!==e)return"start"===n?e.toString(16).padStart(2,"0"):e.toString(16).padEnd(2,"0")}}const r={AND:0,OR:1,ADD:2,SUB:3,LW:4,SW:5,MOV:6,INP:7,JEQ:8,JNE:9,JGT:10,JLT:11,LW:12,SW:13,LI:14,JMP:15}},496:e=>{e.exports=require("vscode")}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={exports:{}};return e[o](a,a.exports,t),a.exports}t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{var e=o;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const n=t(496),r=new(t(382).Assembler);e.activate=function(e){e.subscriptions.push(n.commands.registerCommand("sapicpu-assembler.assemble",(()=>{let e="",t="",o="Copy your assembled code from here (including 'v2.o raw'): \n\n";n.window.activeTextEditor?.document.getText()&&(e=n.window.activeTextEditor?.document.getText()),t=r.assemble(e),o=t.concat(t),n.window.createWebviewPanel("sapicpu-assembler","Assembled Code",n.ViewColumn.One,{}).webview.html=function(e){const[n,t]=(8,[(o=e).slice(0,8),o.slice(8)]);var o;return`\n  <!DOCTYPE html>\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Assembled code</title>\n    <style> \n      :root{\n        --bg-color: #17181A;\n        --accent-color: #0AB377;\n        --text-color: #CDD1CC;\n        --gray-500: #202123;\n        --gray-400: #494A4C;\n\n        --heading-font: 'Space Mono', monospace;\n        --text-font: 'Roboto Mono', monospace;\n      }\n    body {\n      background: var(--bg-color);\n      margin: auto;\n      margin-top:3rem;\n      width: 80%;\n      border: 2px solid #0AB377;\n      padding: 10px;\n      text-align: center;\n      margin-bottom: 50px;\n      }\n      \n    textarea.code {\n      background: #404040;\n      color: white;\n      width: 90%;\n      resize: none;\n      display: block;\n      border-radius: 10px;\n      overflow-y: auto;\n      overflow-x: hidden;\n      font-family: monospace;\n      border: 1px solid #0AB377;\n      padding: 1em;\n      white-space:pre-wrap;\n      }\n\n    .btn{\n      margin-bottom: 15px;\n      background: var(--bg-color);\n      color: var(--text-color);\n      font-family: var(--text-font);\n      padding: 10px 15px 10px 15px;\n      border: solid 1px var(--accent-color);\n      font-size: 13px;\n\n      transition: background .1s ease-out;\n    }\n\n    .btn:hover{\n      background: var(--accent-color);\n      color: var(--bg-color);\n      cursor: pointer;\n    }\n    .active-btn{\n      background: var(--accent-color) !important;\n      color: var(--bg-color) !important;\n    }\n\n    a:link { text-decoration: none; }\n    a:visited { text-decoration: none; }\n    a:hover { text-decoration: none; }\n    a:active { text-decoration: none; }\n\n</style>\n  </head>\n  <body>\n    <h2>Copy your assembled code from here (including 'v2.o raw'):</h2>\n    <textarea id="textarea" class="code" contenteditable="true" spellcheck="false" aria-label='Assembled Code' >${n}${t}</textarea>\n    <div>\n      <br>\n      <p>Check out our Assembly Website:</p>\n      <br>\n      <div>\n        <a class="btn" taget="_blank" href="https://sapi-cpu.netlify.app/">SapiCPU</a>\n      </div>\n      <br>\n    </div>\n  </body>\n</html>\n\n  `}(t),n.window.showInformationMessage("Your code has been assembled!"),n.window.createTerminal("Assembler"),n.window.onDidOpenTerminal((()=>{console.log(o)}))})))},e.deactivate=function(){}})(),module.exports=o})();